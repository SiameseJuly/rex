import angr
import angrop
import os
from .shellcode_factory import ShellcodeFactory
from rex.exploit import CannotExploit

import logging
l = logging.getLogger("rex.exploit.exploit_factory")

class ExploitFactory(object):
    '''
    Exploit factory object responsible for managing exploits and creating exploit objects
    '''

    def __init__(self,crash, shellcode_opts=None, blacklist_techniques=None,hijack=None,read_addr=None,write_addr=None,write_value=None,pov_dir=None):
        '''
        :param crash: an exploitable crash object
        :param shellcode_opts: options to pass to the ShellcodeFactory
        :param blacklist_techniques: a set of techniques to skip
        '''

        if not crash.exploitable():
            raise CannotExploit("crash cannot be exploited")

        self.crash = crash
        self.nameIndex = 0

        self.binary = crash.binary

        self.os = crash.project.loader.main_bin.os

        project = angr.Project(self.binary)
        # let's put together our rop gadgets
        self.rop = self.crash.rop
        shellcode_opts = { } if shellcode_opts is None else shellcode_opts
        self.shellcode = ShellcodeFactory(project, **shellcode_opts)

        self.arsenal = { }

        self.blacklist_techniques = set() if blacklist_techniques is None else blacklist_techniques
        self.hijack_addr = None if hijack is None else hijack
        self.read_addr = None if read_addr is None else read_addr
        self.write_addr = None if write_addr is None else write_addr
        self.write_value = None if write_value is None else write_value
        self.pov_dir = None if pov_dir is None else pov_dir
        
    def dump(self):
        for exploit_name in self.arsenal:
            self.arsenal[exploit_name].script("%s.py" % exploit_name)

        return len(self.arsenal)

    def initialize(self):
        '''
        for technique in Techniques[self.os]:
            p = technique(self.crash, self.rop, self.shellcode)
            if p.name in self.blacklist_techniques:
                continue
            try:
                l.debug("applying technique %s", p.name)
                self.arsenal[p.name] = p.apply(hijack=self.hijack_addr,write_addr=self.write_addr,write_value=self.write_value,read_addr=self.read_addr)
            except CannotExploit as e:
                l.debug("technique failed: %s", e.message)
            '''
        if (self.crash.crash_types[0] == 'partial_ip_overwrite') or (self.crash.crash_types[0] == 'ip_overwrite'):
            for technique in Techniques[self.os]:
                p = technique(self.crash.copy(), self.rop, self.shellcode)
                if p.name in self.blacklist_techniques:
                    continue
                try:
                    l.debug("applying technique %s", p.name)
                    self.arsenal[p.name] = p.apply(hijack=self.hijack_addr,write_addr=self.write_addr,write_value=self.write_value,read_addr=self.read_addr)
                    pov_path_dir = os.path.join(self.pov_dir,os.path.basename(self.arsenal[p.name].crash.project.filename))
                    
                    saved_file = pov_path_dir + '-rex-' + str(self.nameIndex) + '.' + p.name 
                    while os.path.exists(saved_file):
                        self.nameIndex = self.nameIndex + 1
                        saved_file = pov_path_dir + '-rex-' + str(self.nameIndex) + '.' + p.name 
                    
                    if saved_file is not None:
                        solved = list(self.arsenal[p.name].dump())
                        orig = self.arsenal[p.name].crash.crash
                        for s_index in range(len(solved)):
                            if solved[s_index] == '\x00':
                                solved[s_index] = orig[s_index]
                        
                        with open(saved_file,'w') as f_out:
                            f_out.write(''.join(solved))
                                
                except CannotExploit as e:
                    l.debug("technique failed: %s", e.message)            
            
       
from .techniques import Techniques
