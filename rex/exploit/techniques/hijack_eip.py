import logging
from rex import Vulnerability
from rex.exploit import Exploit, CannotExploit
from ..technique import Technique

l = logging.getLogger("rex.exploit.techniques.call_shellcode")

class HiJackPointer(Technique):

    name = "EIP"

    applicable_to = ['unix']

    def apply(self, **kwargs):

        # can only exploit ip overwrites
        if not self.crash.one_of([Vulnerability.IP_OVERWRITE, Vulnerability.PARTIAL_IP_OVERWRITE]):
            raise CannotExploit("[%s] cannot control ip" % self.name)


        if not self.crash.project.loader.main_bin.execstack:
            raise CannotExploit("[%s] stack is not executable" % self.name)
        
        # try to write shellcode into global memory
        shc_addr = kwargs["hijack"]
        if shc_addr is None:
            raise CannotExploit("[%s] Did not give me the addr to hijack ip, %s" % (self.name, e.message))
       
        # add the constraint that the ip must point at the shellcode
        self.crash.state.add_constraints(self.crash.state.ip == shc_addr)

        if not self.crash.state.satisfiable():
            raise CannotExploit("[%s] generated exploit is not satisfiable" % self.name)
        
        return Exploit(self.crash, bypasses_nx=False, bypasses_aslr=True)
